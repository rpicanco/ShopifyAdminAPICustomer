openapi: 3.0.0
info:
  title: Shopify Customer Admin API
  contact: {}
  version: '1.0'
servers:
  - url: http://localhost:8080
paths:
  /admin/customers:
    post:
      security:
        - OAuth2: [write_customers, read_customers]
      tags:
       - Customer
      summary: Store the customer informations.
      description: Store the customer informations.
      operationId: storeCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        description: The customer information.
      responses:
        "201":
          description: Customer information stored.
          headers:
            Location:
              description: Location of the resource.
              schema:
                type: string
                example: http://localhost:8080/sensediabank/v1/customers/{id}
        "400":
          description: Invalid request. Not all necessary data are validated for hiring at
            this point. Validates mandatory attributes according to swagger
            definitions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid Authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Business error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /admin/customers/{id}:
    get:
      security:
        - OAuth2: [read_customers]
      tags:
      - Customer
      summary: Retrieve the customer by its ID
      description: Retrieve the customer by its ID
      operationId: getCustomer
      parameters:
        - $ref: '#/components/parameters/CustomerIDParam'
      responses:
        "200":
          description: The customer information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid request. Not all necessary data are validated for hiring at
            this point. Validates mandatory attributes according to swagger
            definitions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid Authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Payment link not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /admin/api/v1/customers/{id}/addresses:
    post:
      summary: Store the customer informations.
      description: Store the customer informations.
      operationId: XX
      security:
        - OAuth2: [write_customers, read_customers]
      tags:
       - Address
      parameters:
        - $ref: '#/components/parameters/CustomerIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        description: The customer information.
      responses:
        "201":
          description: Customer information stored.
          headers:
            Location:
              description: Location of the resource.
              schema:
                type: string
                example: http://localhost:8080/sensediabank/v1/customers/{id}
        "400":
          description: Invalid request. Not all necessary data are validated for hiring at
            this point. Validates mandatory attributes according to swagger
            definitions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid Authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Business error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /admin/api/v1/customer_saved_searches:
    post:
      security:
        - OAuth2: [write_customers, read_customers]
      tags:
       - Customer Search Manager
      summary: Store the customer informations.
      description: Store the customer informations.
      operationId: XXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        description: The customer information.
      responses:
        "201":
          description: Customer information stored.
          headers:
            Location:
              description: Location of the resource.
              schema:
                type: string
                example: http://localhost:8080/sensediabank/v1/customers/{id}
        "400":
          description: Invalid request. Not all necessary data are validated for hiring at
            this point. Validates mandatory attributes according to swagger
            definitions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid Authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Business error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /admin/api/v1/customers/search:
    post:
      summary: Store the customer informations.
      description: Store the customer informations.
      operationId: X
      security:
        - OAuth2: [write_customers, read_customers]
      tags:
       - Customer Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        description: The customer information.
      responses:
        "201":
          description: Customer information stored.
          headers:
            Location:
              description: Location of the resource.
              schema:
                type: string
                example: http://localhost:8080/sensediabank/v1/customers/{id}
        "400":
          description: Invalid request. Not all necessary data are validated for hiring at
            this point. Validates mandatory attributes according to swagger
            definitions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid Authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Business error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            write_customers: Access to Create Customer (POST), Edit Customer (PUT and PATCH) and Remove Customer (DELETE).
            change_state_customers: Access to Edit Customer State (POST).
            read_customers: Access to Read Customer Information (GET).
            search_customers: Access to Read Customer Information in an advanced manner. (GET).
  
  parameters:
    CustomerIDParam:
      name: id
      in: path
      description: "The Customer id"
      example: "06f256c8-1bbf-42bf-93b4-ce2041bfb87e"
      required: true
      schema:
        type: string
        format: uuidv4
  
  schemas:
    Customer:
      type: object
      required:
       - email
       - first_name
       - last_name
      properties:
        customer_id:
          type: string
          format: uuidv4
          description: "A unique identifier for the customer."
          example: "06f256c8-1bbf-42bf-93b4-ce2041bfb87e"
          readOnly: true
        first_name:
          type: string
          description: "The customer's first name."
          example: "John"
        last_name:
          type: string
          description: "The customer's last name."
          example: "Norman"
        email:
          type: string
          description: "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error."
          example: "bob.norman@hostmail.com"
        note:
          type: string
          description: "A note about the customer."
          example: "Placed an order that had a fraud warning"
        phone:
          type: string
          description: "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error. The property can be set using different formats, but each format must represent a number that can be dialed from anywhere in the world. The following formats are all valid: [6135551212, +16135551212, (613)555-1212, +1 613-555-1212]"
          example: "6135551212"
        
        address:
          $ref: '#/components/schemas/Address'
        default_address:
          $ref: '#/components/schemas/DefaultAddress'
        marketing:
          $ref: '#/components/schemas/Marketing'
        tags:
          type: string
          description: "Tags that the shop owner has attached to the customer, formatted as a string of comma-separated values. A customer can have up to 250 tags. Each tag can have up to 255 characters."
          example: "loyal"
        state:
          type: string
          enum:
            - disabled
            - invited
            - enabled
            - declined
          description: >-
            Tipo de documento do portador:
            <br>disabled - "The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time."
            <br>invited - "The customer has received an email invite to create an account."
            <br>enabled - "The customer has created an account."
            <br>declined - "The customer declined the email invite to create an account."
          default: disabled
          readOnly: true
        verified_email:
          type: boolean
          description: "Whether the customer has verified their email address."
          default: false
        last_order:
          $ref: '#/components/schemas/Order'
        created_at:
          type: string
          format: datetime
          description: "The date and time (ISO 8601 format) when the customer was created."
          readOnly: true
        updated_at:
          type: string
          format: datetime
          description: "The date and time (ISO 8601 format) when the customer information was last updated."
          readOnly: true
    
    Address:
      type: object
      required:
       - customer_id
      properties:
        customer_id:
          type: string
          format: uuidv4
          description: Unique identifier of the customer.
          example: "06f256c8-1bbf-42bf-93b4-ce2041bfb87e"
          readOnly: true
          
    Marketing:
      type: object
      properties:
        accepts_marketing:
          type: boolean
          description: "Whether the customer has consented to receive marketing material via email."
          default: false
        accepts_marketing_updated_at:
          type: string
          format: datetime
          description: "The date and time (ISO 8601 format) when the customer consented or objected to receiving marketing material by email. Set this value whenever the customer consents or objects to marketing materials."
          readOnly: true
          
    Order:
      type: object
      properties:
        last_order_id:
          type: string
          description: "The ID of the customer's last order."
          example: "9e8783c6-d3be-4236-9cc4-a20d45276d53"
          readOnly: true
        last_order_name:
          type: string
          description: "The name of the customer's last order. This is directly related to the name field on the Order resource."
          example: "9e8783c6-d3be-4236-9cc4-a20d45276d53"
          readOnly: true
        orders_count:
          type: number
          description: "The number of orders associated with this customer."
          example: 5
          readOnly: true
        total_spent:
          type: string
          description: "The total amount of money that the customer has spent across their order history."
          example: "375.30"
          readOnly: true
        currency:
          type: string
          description: "The three-letter code (ISO 4217 format) for the currency that the customer used when they paid for their last order. Defaults to the shop currency. Returns the shop currency for test orders."
          example: "EUR"
          readOnly: true
          
    DefaultAddress:
      type: object
      readOnly: true
      required:
       - customer_id
      properties:
        customer_id:
          type: string
          format: uuidv4
          description: Unique identifier of the customer.
          example: "06f256c8-1bbf-42bf-93b4-ce2041bfb87e"
          readOnly: true
          
    CustomerSearchManager:
      type: object
      required:
       - customer_id
      properties:
        customer_id:
          type: string
          format: uuidv4
          description: Unique identifier of the customer.
          example: "06f256c8-1bbf-42bf-93b4-ce2041bfb87e"
          readOnly: true
    
    Error:
      required:
      - message
      type: object
      properties:
        code:
          type: string
          description: For some errors that could be handled programmatically, a short string indicating the error code reported. Note that this is not the HTTP return code.
          example: field_size_error
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Size for field [name] must be between 10 and 50
        details:
          type: array
          items:
            type: object
          description: Array of other error information and details. Object type can very depending on the context of the error.
          example: '[{ "security_code": "security code is invalid"}, {"card_number":"card number is required"}]'